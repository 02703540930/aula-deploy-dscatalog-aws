#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
#spring.jpa.properties.hibernate.hbm2ddl.delimiter=;

#spring.datasource.url=jdbc:postgresql://localhost:5432/dscatalog
#spring.datasource.username=postgres
#spring.datasource.password=1234567

#Dados de conexão do hiroku (username:password@host:porta/maintnanceDatabaseName)
#postgres://
#ksawnblxvvwllx
#:
#1f0ca3e52156dcf961f18865c4572eb57ef48e60e725ee09aad47a89e0808113
#@
#ec2-54-159-176-167.compute-1.amazonaws.com
#:
#5432
#/
#dd87dg7qhuq9p7

# docker run -p 5433:5432 --name meu-container-pg12 
# -e POSTGRES_PASSWORD=1234567 
# -e POSTGRES_DB=minha_base postgres:12-alpine

# criação da imagem do container para o heroku acessar o postgres
# docker run -p 80:8080 --name dscatalog-heroku
# -e APP_PROFILE=dev
# -e CLIENT_ID=dscatalog
# -e CLIENT_SECRET=dscatalog123
# -e JWT_SECRET=MY-JWT-SECRET
# -e JWT_DURATION=86400
# -e DB_URL=jdbc:postgresql://ec2-54-159-176-167.compute-1.amazonaws.com:5432/dd87dg7qhuq9p7
# -e DB_USERNAME=ksawnblxvvwllx
# -e DB_PASSWORD=1f0ca3e52156dcf961f18865c4572eb57ef48e60e725ee09aad47a89e0808113
# -e POSTGRES_DB=minha_base dscatalog:v1

#lembrar de trocar a porta 8080 para 80 no postman quando for testar com docker run

spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.hibernate.ddl-auto=none
